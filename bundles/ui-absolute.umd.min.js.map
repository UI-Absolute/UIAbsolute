{"version":3,"sources":["ng://ui-absolute/lib/ui-absolute.service.ts","ng://ui-absolute/lib/ui-absolute.component.ts","ng://ui-absolute/models/interfaces/theme/theme.enum.ts","ng://ui-absolute/models/interfaces/badges/badges.enum.ts","ng://ui-absolute/models/interfaces/spinners/spinners.enum.ts","ng://ui-absolute/models/interfaces/switches/switches.enum.ts","ng://ui-absolute/models/interfaces/buttons/buttons.enum.ts","ng://ui-absolute/models/interfaces/checkbox/checkbox.enum.ts","ng://ui-absolute/models/interfaces/radio/radio.enum.ts","ng://ui-absolute/lib/modules/badges/badges.component.ts","ng://ui-absolute/lib/modules/badges/badges.module.ts","ng://ui-absolute/lib/ui-absolute.module.ts","ng://ui-absolute/lib/modules/spinners/spinners.component.ts","ng://ui-absolute/lib/modules/spinners/spinners.module.ts","ng://ui-absolute/lib/modules/switches/switches.component.ts","ng://ui-absolute/lib/modules/switches/switches.module.ts","ng://ui-absolute/lib/modules/buttons/buttons.component.ts","ng://ui-absolute/lib/modules/buttons/button-toggle/button-toggle.component.ts","ng://ui-absolute/lib/modules/buttons/buttons.module.ts","ng://ui-absolute/lib/modules/tooltip/tooltip.component.ts","ng://ui-absolute/lib/modules/tooltip/tooltip.module.ts","ng://ui-absolute/lib/modules/checkbox/checkbox.component.ts","ng://ui-absolute/lib/modules/checkbox/checkbox.module.ts","ng://ui-absolute/lib/modules/radio/radio.component.ts","ng://ui-absolute/lib/modules/radio/radio.module.ts"],"names":["UiAbsoluteService","Injectable","args","providedIn","UiAbsoluteComponent","prototype","ngOnInit","Component","selector","template","PRIMARY","SECONDARY","WARNING","SUCCESS","DANGER","INFO","LIGHT","DARK","DEFAULT","ROUNDED","SMALL","LARGE","SLOW","FAST","HORIZONTAL","BadgesComponent","this","badgeSettings","bg_color","text_color","shape","applySettings","settings","UIA_THEME","BADGES_SHAPE","Input","UIABadgesModule","NgModule","declarations","imports","CommonModule","exports","UiAbsoluteModule","SpinnersComponent","spinnerSettings","color","size","speed","SPINNERS_SIZE","SPINNERS_SPEED","UIASpinnersModule","SwitchesComponent","switchSettings","SWITCHES_SIZE","UIASwitchesModule","ButtonsComponent","buttonSettings","isOutline","BUTTON_SIZE","ButtonToggleComponent","buttonToggleSettings","UIAButtonsModule","TooltipComponent","ngAfterViewInit","UIATooltipModule","CheckboxComponent","checkboxSettings","align","CHECKBOX_ALIGN","UIACheckboxModule","RadioComponent","radioSettings","RADIO_ALIGN","UIARadioModule"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UiAbsoluteService {\n\n  constructor() { }\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'lib-ui-absolute',\n  template: `\n    <p>\n      ui-absolute works!\n    </p>\n  `,\n  styles: []\n})\nexport class UiAbsoluteComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","export enum UIA_THEME {\n  PRIMARY = 'primary',\n  SECONDARY = 'secondary',\n  WARNING = 'warning',\n  SUCCESS = 'success',\n  DANGER = 'danger',\n  INFO = 'info',\n  LIGHT = 'light',\n  DARK = 'dark'\n}\n","export enum BADGES_SHAPE {\n  DEFAULT = 'default',\n  ROUNDED = 'rounded'\n}\n","export enum SPINNERS_SIZE {\n  SMALL = 'small',\n  DEFAULT = 'default',\n  LARGE = 'large'\n}\n\nexport enum SPINNERS_SPEED {\n  SLOW = 'slow',\n  DEFAULT = 'default',\n  FAST = 'fast'\n}\n","export enum SWITCHES_SIZE {\n  DEFAULT = 'default',\n  LARGE = 'large'\n}\n","export enum BUTTON_SIZE {\n  DEFAULT = 'default',\n  SMALL = 'small',\n  LARGE = 'large'\n}\n","export enum CHECKBOX_ALIGN {\n  DEFAULT = 'default',\n  HORIZONTAL = 'horizontal'\n}\n","export enum RADIO_ALIGN {\n  DEFAULT = 'default',\n  HORIZONTAL = 'horizontal'\n}\n","import { Component, Input, OnInit } from '@angular/core';\nimport { BadgesConfig, UIA_THEME, BADGES_SHAPE } from './../../../models';\n\n@Component({\n  selector: 'lib-uia-badge',\n  templateUrl: './badges.component.html',\n  styleUrls: ['./badges.component.scss']\n})\nexport class BadgesComponent implements OnInit {\n\n  @Input() settings: BadgesConfig;\n  @Input() value: any;\n\n  badgeSettings = {\n    bg_color: 'bg-primary',\n    text_color: 'text-white',\n    shape: ''\n  };\n\n  constructor() { }\n\n  ngOnInit() {\n    this.applySettings(this.settings);\n  }\n\n  applySettings(settings) {\n    if (!settings) { return; }\n\n    // For setting the background color of badge based on the settings recieved\n    switch (settings.bg_color) {\n      case UIA_THEME.SECONDARY:\n        this.badgeSettings.bg_color = 'bg-secondary';\n        break;\n      case UIA_THEME.SUCCESS:\n        this.badgeSettings.bg_color = 'bg-success';\n        break;\n      case UIA_THEME.DANGER:\n        this.badgeSettings.bg_color = 'bg-danger';\n        break;\n      case UIA_THEME.WARNING:\n        this.badgeSettings.bg_color = 'bg-warning';\n        this.badgeSettings.text_color = 'text-dark';\n        break;\n      case UIA_THEME.INFO:\n        this.badgeSettings.bg_color = 'bg-info';\n        break;\n      case UIA_THEME.LIGHT:\n        this.badgeSettings.bg_color = 'bg-light';\n        this.badgeSettings.text_color = 'text-dark';\n        break;\n      case UIA_THEME.DARK:\n        this.badgeSettings.bg_color = 'bg-dark';\n        break;\n      default:\n        this.badgeSettings.bg_color = 'bg-primary';\n    }\n\n    // For setting the shape of badge based on settings recieved\n    switch (settings.shape) {\n      case BADGES_SHAPE.ROUNDED:\n        this.badgeSettings.shape = 'rounded-pill';\n        break;\n      default:\n        this.badgeSettings.shape = '';\n    }\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { BadgesComponent } from './badges.component';\n\n@NgModule({\n  declarations: [\n    BadgesComponent\n  ],\n  imports: [\n    CommonModule\n  ],\n  exports: [\n    BadgesComponent\n  ]\n})\nexport class UIABadgesModule { }\n","import { NgModule } from '@angular/core';\nimport { UIABadgesModule } from './modules/badges/badges.module';\nimport { UiAbsoluteComponent } from './ui-absolute.component';\n\n@NgModule({\n  declarations: [UiAbsoluteComponent],\n  imports: [\n    UIABadgesModule\n  ],\n  exports: [UiAbsoluteComponent]\n})\nexport class UiAbsoluteModule { }\n","import { Component, Input, OnInit } from '@angular/core';\nimport { SpinnersConfig, UIA_THEME, SPINNERS_SIZE, SPINNERS_SPEED } from './../../../models';\n\n@Component({\n  selector: 'lib-uia-spinner',\n  templateUrl: './spinners.component.html',\n  styleUrls: ['./spinners.component.scss']\n})\nexport class SpinnersComponent implements OnInit {\n\n  @Input() settings: SpinnersConfig;\n  @Input() loadingText: string;\n\n  spinnerSettings = {\n    color: 'text-success',\n    size: '',\n    speed: '0.75s'\n  };\n\n  constructor() { }\n\n  ngOnInit() {\n    this.applySettings(this.settings);\n  }\n\n  applySettings(settings) {\n    if (!settings) { return; }\n\n    // For setting the background color of badge based on the settings recieved\n    switch (settings.color) {\n      case UIA_THEME.SECONDARY:\n        this.spinnerSettings.color = 'text-secondary';\n        break;\n      case UIA_THEME.SUCCESS:\n        this.spinnerSettings.color = 'text-success';\n        break;\n      case UIA_THEME.DANGER:\n        this.spinnerSettings.color = 'text-danger';\n        break;\n      case UIA_THEME.WARNING:\n        this.spinnerSettings.color = 'text-warning';\n        break;\n      case UIA_THEME.INFO:\n        this.spinnerSettings.color = 'text-info';\n        break;\n      case UIA_THEME.LIGHT:\n        this.spinnerSettings.color = 'text-light';\n        break;\n      case UIA_THEME.DARK:\n        this.spinnerSettings.color = 'text-dark';\n        break;\n      default:\n        this.spinnerSettings.color = 'text-primary';\n    }\n    switch (settings.size) {\n      case SPINNERS_SIZE.SMALL:\n        this.spinnerSettings.size = 'spinner-border-sm';\n        break;\n      case SPINNERS_SIZE.LARGE:\n        this.spinnerSettings.size = 'spinner-border-lg';\n        break;\n      default:\n        this.spinnerSettings.size = '';\n    }\n    switch (settings.speed) {\n      case SPINNERS_SPEED.SLOW:\n        this.spinnerSettings.speed = '2s';\n        break;\n      case SPINNERS_SPEED.FAST:\n        this.spinnerSettings.speed = '0.25s';\n        break;\n      default:\n        this.spinnerSettings.speed = '0.75s';\n    }\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SpinnersComponent } from './spinners.component';\n\n@NgModule({\n  declarations: [\n    SpinnersComponent\n  ],\n  imports: [\n    CommonModule\n  ],\n  exports: [\n    SpinnersComponent\n  ]\n})\nexport class UIASpinnersModule { }\n","import { Component, Input, OnInit } from '@angular/core';\nimport { SwitchesConfig, SWITCHES_SIZE, UIA_THEME } from './../../../models';\n\n@Component({\n  selector: 'lib-uia-switch',\n  templateUrl: './switches.component.html',\n  styleUrls: ['./switches.component.scss']\n})\nexport class SwitchesComponent implements OnInit {\n\n  @Input() settings: SwitchesConfig;\n  @Input() checked: boolean;\n  @Input() disabled: boolean;\n\n  switchSettings = {\n    color: 'switch-success',\n    size: ''\n  };\n\n  constructor() { }\n\n  ngOnInit() {\n    this.applySettings(this.settings);\n  }\n\n  applySettings(settings) {\n    if (!settings) { return; }\n\n    switch (settings.color) {\n      case UIA_THEME.SECONDARY:\n        this.switchSettings.color = 'switch-secondary';\n        break;\n      case UIA_THEME.SUCCESS:\n        this.switchSettings.color = 'switch-success';\n        break;\n      case UIA_THEME.DANGER:\n        this.switchSettings.color = 'switch-danger';\n        break;\n      case UIA_THEME.WARNING:\n        this.switchSettings.color = 'switch-warning';\n        break;\n      case UIA_THEME.INFO:\n        this.switchSettings.color = 'switch-info';\n        break;\n      case UIA_THEME.LIGHT:\n        this.switchSettings.color = 'switch-light';\n        break;\n      case UIA_THEME.DARK:\n        this.switchSettings.color = 'switch-dark';\n        break;\n      default:\n        this.switchSettings.color = 'switch-primary';\n    }\n    switch (settings.size) {\n      case SWITCHES_SIZE.LARGE:\n        this.switchSettings.size = '';\n        break;\n        default:\n          this.switchSettings.size = 'switch-sm';\n    }\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SwitchesComponent } from './switches.component';\n\n@NgModule({\n  declarations: [\n    SwitchesComponent\n  ],\n  imports: [\n    CommonModule\n  ],\n  exports: [\n    SwitchesComponent\n  ]\n})\nexport class UIASwitchesModule { }\n","import { Component, Input, OnInit } from '@angular/core';\nimport { ButtonsConfig, BUTTON_SIZE, UIA_THEME } from './../../../models';\n\n@Component({\n  selector: 'lib-uia-button',\n  templateUrl: './buttons.component.html',\n  styleUrls: ['./buttons.component.scss']\n})\nexport class ButtonsComponent implements OnInit {\n\n  @Input() settings: ButtonsConfig;\n  @Input() value: any;\n\n  buttonSettings = {\n    bg_color: 'btn-primary',\n    text_color: '',\n    size: '',\n    isOutline: false\n  };\n\n  constructor() { }\n\n  ngOnInit() {\n    this.applySettings(this.settings);\n  }\n\n  applySettings(settings) {\n    if (!settings) { return; }\n\n    switch (settings.bg_color) {\n      case UIA_THEME.SECONDARY:\n        this.buttonSettings.bg_color = settings.isOutline ? 'btn-outline-secondary' : 'btn-secondary';\n        this.buttonSettings.text_color = settings.isOutline ? '' : 'text-white';\n        break;\n      case UIA_THEME.SUCCESS:\n        this.buttonSettings.bg_color = settings.isOutline ? 'btn-outline-success' : 'btn-success';\n        this.buttonSettings.text_color = settings.isOutline ? '' : 'text-white';\n        break;\n      case UIA_THEME.DANGER:\n        this.buttonSettings.bg_color = settings.isOutline ? 'btn-outline-danger' : 'btn-danger';\n        this.buttonSettings.text_color = settings.isOutline ? '' : 'text-white';\n        break;\n      case UIA_THEME.WARNING:\n        this.buttonSettings.bg_color = settings.isOutline ? 'btn-outline-warning' : 'btn-warning';\n        this.buttonSettings.text_color = settings.isOutline ? '' : 'text-dark';\n        break;\n      case UIA_THEME.INFO:\n        this.buttonSettings.bg_color = settings.isOutline ? 'btn-outline-info' : 'btn-info';\n        this.buttonSettings.text_color = settings.isOutline ? '' : 'text-white';\n        break;\n      case UIA_THEME.LIGHT:\n        this.buttonSettings.bg_color = settings.isOutline ? 'btn-outline-light' : 'btn-light';\n        this.buttonSettings.text_color = settings.isOutline ? '' : 'text-dark';\n        break;\n      case UIA_THEME.DARK:\n        this.buttonSettings.bg_color = settings.isOutline ? 'btn-outline-dark' : 'btn-dark';\n        this.buttonSettings.text_color = settings.isOutline ? '' : 'text-white';\n        break;\n      default:\n        this.buttonSettings.bg_color = settings.isOutline ? 'btn-outline-primary' : 'btn-primary';\n        this.buttonSettings.text_color = settings.isOutline ? '' : 'text-white';\n    }\n\n    this.buttonSettings.size = (settings.size === BUTTON_SIZE.LARGE) ? 'btn-lg'\n                                : (settings.size === BUTTON_SIZE.SMALL) ? 'btn-sm'\n                                : '';\n  }\n\n}\n","import { Component, Input, OnInit } from '@angular/core';\nimport { ButtonsToggleConfig, BUTTON_SIZE, UIA_THEME } from './../../../../models';\n\n@Component({\n  selector: 'lib-uia-button-toggle',\n  templateUrl: './button-toggle.component.html',\n  styleUrls: ['./button-toggle.component.scss']\n})\nexport class ButtonToggleComponent implements OnInit {\n\n  @Input() settings: ButtonsToggleConfig;\n  @Input() value: any;\n  @Input() checked: boolean;\n\n  buttonToggleSettings = {\n    bg_color: 'btn-primary',\n    text_color: '',\n    size: '',\n    isOutline: false\n  };\n\n  constructor() { }\n\n  ngOnInit() {\n    this.applySettings(this.settings);\n  }\n\n  applySettings(settings) {\n    if (!settings) { return; }\n\n    switch (settings.bg_color) {\n      case UIA_THEME.SECONDARY:\n        this.buttonToggleSettings.bg_color = settings.isOutline ? 'btn-outline-secondary' : 'btn-secondary';\n        this.buttonToggleSettings.text_color = settings.isOutline ? '' : 'text-white';\n        break;\n      case UIA_THEME.SUCCESS:\n        this.buttonToggleSettings.bg_color = settings.isOutline ? 'btn-outline-success' : 'btn-success';\n        this.buttonToggleSettings.text_color = settings.isOutline ? '' : 'text-white';\n        break;\n      case UIA_THEME.DANGER:\n        this.buttonToggleSettings.bg_color = settings.isOutline ? 'btn-outline-danger' : 'btn-danger';\n        this.buttonToggleSettings.text_color = settings.isOutline ? '' : 'text-white';\n        break;\n      case UIA_THEME.WARNING:\n        this.buttonToggleSettings.bg_color = settings.isOutline ? 'btn-outline-warning' : 'btn-warning';\n        this.buttonToggleSettings.text_color = settings.isOutline ? '' : 'text-dark';\n        break;\n      case UIA_THEME.INFO:\n        this.buttonToggleSettings.bg_color = settings.isOutline ? 'btn-outline-info' : 'btn-info';\n        this.buttonToggleSettings.text_color = settings.isOutline ? '' : 'text-white';\n        break;\n      case UIA_THEME.LIGHT:\n        this.buttonToggleSettings.bg_color = settings.isOutline ? 'btn-outline-light' : 'btn-light';\n        this.buttonToggleSettings.text_color = settings.isOutline ? '' : 'text-dark';\n        break;\n      case UIA_THEME.DARK:\n        this.buttonToggleSettings.bg_color = settings.isOutline ? 'btn-outline-dark' : 'btn-dark';\n        this.buttonToggleSettings.text_color = settings.isOutline ? '' : 'text-white';\n        break;\n      default:\n        this.buttonToggleSettings.bg_color = settings.isOutline ? 'btn-outline-primary' : 'btn-primary';\n        this.buttonToggleSettings.text_color = settings.isOutline ? '' : 'text-white';\n    }\n\n    this.buttonToggleSettings.size = (settings.size === BUTTON_SIZE.LARGE) ? 'btn-lg'\n                                : (settings.size === BUTTON_SIZE.SMALL) ? 'btn-sm'\n                                : '';\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ButtonsComponent } from './buttons.component';\nimport { ButtonToggleComponent } from './button-toggle/button-toggle.component';\n\n@NgModule({\n  declarations: [\n    ButtonsComponent,\n    ButtonToggleComponent\n  ],\n  imports: [\n    CommonModule\n  ],\n  exports: [\n    ButtonsComponent,\n    ButtonToggleComponent\n  ]\n})\nexport class UIAButtonsModule { }\n","import { AfterViewInit, Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'lib-uia-tooltip',\n  templateUrl: './tooltip.component.html',\n  styleUrls: ['./tooltip.component.scss']\n})\nexport class TooltipComponent implements OnInit, AfterViewInit {\n\n  constructor() { }\n\n  ngOnInit() { }\n\n  ngAfterViewInit() { }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { TooltipComponent } from './tooltip.component';\n\n@NgModule({\n  declarations: [\n    TooltipComponent\n  ],\n  imports: [\n    CommonModule\n  ],\n  exports: [\n    TooltipComponent\n  ]\n})\nexport class UIATooltipModule { }\n","import { Component, Input, OnInit } from '@angular/core';\nimport { CheckboxConfig, CHECKBOX_ALIGN, UIA_THEME } from './../../../models';\n\n@Component({\n  selector: 'lib-uia-checkbox',\n  templateUrl: './checkbox.component.html',\n  styleUrls: ['./checkbox.component.scss']\n})\nexport class CheckboxComponent implements OnInit {\n\n  @Input() settings: CheckboxConfig;\n\n  checkboxSettings = {\n    color: '',\n    align: ''\n  };\n\n  constructor() { }\n\n  ngOnInit() {\n    this.applySettings(this.settings);\n  }\n\n  applySettings(settings) {\n    if (!settings) { return; }\n\n    // For setting the color of checkbox based on the settings recieved\n    switch (settings.color) {\n      case UIA_THEME.SECONDARY:\n        this.checkboxSettings.color = 'checkbox-secondary';\n        break;\n      case UIA_THEME.SUCCESS:\n        this.checkboxSettings.color = 'checkbox-success';\n        break;\n      case UIA_THEME.DANGER:\n        this.checkboxSettings.color = 'checkbox-danger';\n        break;\n      case UIA_THEME.WARNING:\n        this.checkboxSettings.color = 'checkbox-warning';\n        break;\n      case UIA_THEME.INFO:\n        this.checkboxSettings.color = 'checkbox-info';\n        break;\n      case UIA_THEME.LIGHT:\n        this.checkboxSettings.color = 'checkbox-light';\n        break;\n      case UIA_THEME.DARK:\n        this.checkboxSettings.color = 'checkbox-dark';\n        break;\n      default:\n        this.checkboxSettings.color = 'checkbox-primary';\n    }\n\n    switch (settings.align) {\n      case CHECKBOX_ALIGN.HORIZONTAL:\n        this.checkboxSettings.align = 'checkbox-inline';\n        break;\n      default:\n        this.checkboxSettings.align = '';\n    }\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { CheckboxComponent } from './checkbox.component';\n\n@NgModule({\n  declarations: [\n    CheckboxComponent\n  ],\n  imports: [\n    CommonModule\n  ],\n  exports: [\n    CheckboxComponent\n  ]\n})\nexport class UIACheckboxModule { }\n","import { Component, Input, OnInit } from '@angular/core';\nimport { RadioConfig, RADIO_ALIGN, UIA_THEME } from './../../../models';\n\n@Component({\n  selector: 'lib-uia-radio',\n  templateUrl: './radio.component.html',\n  styleUrls: ['./radio.component.scss']\n})\nexport class RadioComponent implements OnInit {\n\n  @Input() settings: RadioConfig;\n\n  radioSettings = {\n    color: '',\n    align: ''\n  };\n\n  constructor() { }\n\n  ngOnInit() {\n    this.applySettings(this.settings);\n  }\n\n  applySettings(settings) {\n    if (!settings) { return; }\n\n    // For setting the color of radio based on the settings recieved\n    switch (settings.color) {\n      case UIA_THEME.SECONDARY:\n        this.radioSettings.color = 'radio-secondary';\n        break;\n      case UIA_THEME.SUCCESS:\n        this.radioSettings.color = 'radio-success';\n        break;\n      case UIA_THEME.DANGER:\n        this.radioSettings.color = 'radio-danger';\n        break;\n      case UIA_THEME.WARNING:\n        this.radioSettings.color = 'radio-warning';\n        break;\n      case UIA_THEME.INFO:\n        this.radioSettings.color = 'radio-info';\n        break;\n      case UIA_THEME.LIGHT:\n        this.radioSettings.color = 'radio-light';\n        break;\n      case UIA_THEME.DARK:\n        this.radioSettings.color = 'radio-dark';\n        break;\n      default:\n        this.radioSettings.color = 'radio-primary';\n    }\n\n    switch (settings.align) {\n      case RADIO_ALIGN.HORIZONTAL:\n        this.radioSettings.align = 'radio-inline';\n        break;\n      default:\n        this.radioSettings.align = '';\n    }\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RadioComponent } from './radio.component';\n\n@NgModule({\n  declarations: [\n    RadioComponent\n  ],\n  imports: [\n    CommonModule\n  ],\n  exports: [\n    RadioComponent\n  ]\n})\nexport class UIARadioModule { }\n"]}